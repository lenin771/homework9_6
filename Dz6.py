#!/usr/bin/env python
# coding: utf-8

# In[4]:


import pandas as pd
import numpy as np
from statsmodels.stats.weightstats import _tconfint_generic as t_stat
from scipy.stats import norm 
import math


# In[5]:


#1. Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16. 
#Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95, если выборочная средняя M = 80, 
#а объем выборки n = 256.


# In[6]:


mean_std = np.sqrt(16) / 256
t_stat(80, mean_std,256 - 1, 0.05, 'two-sided')


# In[7]:


# 2.В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью, 
# получены опытные данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1 Предполагая, что результаты 
# измерений подчинены нормальному закону распределения вероятностей, оценить истинное значение 
# величины X при помощи доверительного интервала, покрывающего это значение с доверительной вероятностью 0,95.


# In[8]:


X = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
mean_X = X.mean()
std_X = X.std(ddof=1)
mean_std_X = std_X / (np.sqrt(len(X)))
t_stat(mean_X, mean_std_X,len(X) - 1, 0.05, 'two-sided')


# In[9]:


# 3)Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
# Рост матерей  178, 165, 165, 173, 168, 155, 160, 164, 178, 175
# Используя эти данные построить 95% доверительный интервал для разности среднего роста родителей и детей.


# In[11]:


X = np.array([202, 203, 199, 197, 195, 201, 200, 204, 194, 190])
mean_X = X.mean()
std_X = X.std(ddof=1)
t_fact = (mean_X - 200) / std_X * np.sqrt(10)
t_fact


# In[12]:


t_cr = 3.25 
# abs(t_fact) < t_cr нулевая гипотеза принимается

